name: üîç PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      
    steps:
      - name: Check PR Title
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            const conventionalCommitPattern = /^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}/;
            
            if (!conventionalCommitPattern.test(title)) {
              const comment = `## ‚ùå PR Title Check Failed
              
              –ó–∞–≥–æ–ª–æ–≤–æ–∫ PR –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å [Conventional Commits](https://www.conventionalcommits.org/) —Ñ–æ—Ä–º–∞—Ç—É:
              
              \`<type>(<scope>): <description>\`
              
              **–ü—Ä–∏–º–µ—Ä—ã:**
              - \`feat(auth): add Google OAuth integration\`
              - \`fix(api): handle timeout errors properly\`
              - \`docs: update installation guide\`
              - \`refactor(ui): simplify button component\`
              
              **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:**
              - \`feat\` - –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
              - \`fix\` - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞
              - \`docs\` - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
              - \`style\` - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
              - \`refactor\` - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
              - \`test\` - —Ç–µ—Å—Ç—ã
              - \`chore\` - –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
              - \`perf\` - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
              - \`ci\` - CI/CD
              - \`build\` - —Å–±–æ—Ä–∫–∞
              - \`revert\` - –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
              
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ PR.`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              
              core.setFailed('PR title does not follow conventional commits format');
            } else {
              console.log('‚úÖ PR title follows conventional commits format');
            }
            
      - name: Check PR Description
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.pull_request.body || '';
            const hasDescription = body.length > 50;
            const hasChecklist = body.includes('- [');
            
            if (!hasDescription) {
              const comment = `## ‚ùå PR Description Check Failed
              
              –û–ø–∏—Å–∞–Ω–∏–µ PR —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
              
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ:
              - üìù –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
              - üéØ –¶–µ–ª—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
              - üß™ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
              - üìã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —á–µ–∫–ª–∏—Å—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
              
              –•–æ—Ä–æ—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ–≤—å—é–µ—Ä–∞–º –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è!`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['needs-description']
              });
            } else {
              console.log('‚úÖ PR has adequate description');
            }
            
      - name: Check for Breaking Changes
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            const body = context.payload.pull_request.body || '';
            
            const hasBreakingChange = 
              title.includes('BREAKING CHANGE') ||
              title.includes('!:') ||
              body.includes('BREAKING CHANGE') ||
              body.includes('breaking change') ||
              body.includes('üí•');
              
            if (hasBreakingChange) {
              const comment = `## ‚ö†Ô∏è Breaking Change Detected
              
              –≠—Ç–æ—Ç PR —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!
              
              **–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
              - üìñ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ breaking changes –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
              - üìù –û–±–Ω–æ–≤–∏—Ç–µ CHANGELOG.md
              - üî¢ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ major –≤–µ—Ä—Å–∏—é —Ä–µ–ª–∏–∑–∞
              - üì¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ migration guide –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
              - üß™ –¢—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
              
              **–†–µ–≤—å—é–µ—Ä–∞–º:** –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏!`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['üí• breaking-change', 'needs-review', 'priority-high']
              });
            }
            
      - name: Auto-assign Labels
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title.toLowerCase();
            const body = (context.payload.pull_request.body || '').toLowerCase();
            const files = context.payload.pull_request.changed_files;
            
            const labels = [];
            
            // Type-based labels
            if (title.includes('feat')) labels.push('feature');
            if (title.includes('fix')) labels.push('bug');
            if (title.includes('docs')) labels.push('documentation');
            if (title.includes('test')) labels.push('testing');
            if (title.includes('refactor')) labels.push('refactor');
            if (title.includes('perf')) labels.push('performance');
            if (title.includes('style')) labels.push('style');
            
            // Content-based labels
            if (body.includes('security') || title.includes('security')) {
              labels.push('security');
            }
            
            if (body.includes('ui') || body.includes('interface') || title.includes('ui')) {
              labels.push('ui');
            }
            
            if (body.includes('api') || title.includes('api')) {
              labels.push('api');
            }
            
            // Size estimation based on changes
            if (files <= 3) labels.push('size-xs');
            else if (files <= 10) labels.push('size-s');
            else if (files <= 30) labels.push('size-m');
            else if (files <= 100) labels.push('size-l');
            else labels.push('size-xl');
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
              
              console.log(`Added labels: ${labels.join(', ')}`);
            }
            
      - name: Request Reviewers
        uses: actions/github-script@v7
        with:
          script: |
            const author = context.payload.pull_request.user.login;
            const title = context.payload.pull_request.title.toLowerCase();
            const body = (context.payload.pull_request.body || '').toLowerCase();
            
            // Core team members (adjust to your actual team)
            const coreTeam = ['team-lead', 'senior-dev1', 'senior-dev2'];
            const frontendTeam = ['frontend-lead', 'ui-specialist'];
            const backendTeam = ['backend-lead', 'api-specialist'];
            const securityTeam = ['security-lead'];
            
            let reviewers = [];
            
            // Auto-assign based on content
            if (title.includes('security') || body.includes('security')) {
              reviewers = reviewers.concat(securityTeam);
            }
            
            if (title.includes('api') || title.includes('backend') || body.includes('server')) {
              reviewers = reviewers.concat(backendTeam.slice(0, 2));
            }
            
            if (title.includes('ui') || title.includes('frontend') || body.includes('component')) {
              reviewers = reviewers.concat(frontendTeam.slice(0, 1));
            }
            
            // Always include at least one core team member
            if (reviewers.length === 0) {
              reviewers = coreTeam.slice(0, 1);
            }
            
            // Remove author from reviewers
            reviewers = reviewers.filter(reviewer => reviewer !== author);
            
            if (reviewers.length > 0) {
              try {
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  reviewers: reviewers.slice(0, 3) // Max 3 reviewers
                });
                
                console.log(`Requested reviews from: ${reviewers.join(', ')}`);
              } catch (error) {
                console.log('Could not auto-assign reviewers:', error.message);
              }
            }

